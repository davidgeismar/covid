}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
library(readr)
library("tidyverse")
library(httr)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(latitude, longitude, start_date){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", start_date, "T00:00:00&endDateTime=", start_date, "T23:59:00&unitGroup=metric&contentType=csv&location=", latitude,",", longitude, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
latitude <- str_squish(row.lat)
longitude <- str_squish(row.long)
start_date <- str_squish(row.day)
cat(sprintf("latitude : %s \n", latitude))
cat(sprintf("longitude : %s \n", longitude))
cat(sprintf("start_date : %s \n", start_date))
cat(sprintf("row names : %s \n", row))
uri <- build_uri(latitude, longitude, start_date)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
row
row$State
row$long
latitude
response
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
get_temp <- function(row) {
cat(sprintf("URL : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
xxx
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
row
response
row$State
typeof(row$State)
str(row$State)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", str(row$day), "T00:00:00&endDateTime=", str(row$day), "T23:59:00&unitGroup=metric&contentType=csv&location=", str(row$lat),",", str(row$long), "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
xxx
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", str(row$day), "T00:00:00&endDateTime=", str(row$day), "T23:59:00&unitGroup=metric&contentType=csv&location=", str(row$lat),",", str(row$long), "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- apply(asplit(cases_by_region_subset, 1), 1, get_temp)
cases_by_region_subset <- cases_by_region[c(0:3),]
cases_by_region_subset
asplit(cases_by_region_subset, 1)
asplit(cases_by_region_subset, 1)[0]
class(asplit(cases_by_region_subset, 1))
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", str(row$day), "T00:00:00&endDateTime=", str(row$day), "T23:59:00&unitGroup=metric&contentType=csv&location=", str(row$lat),",", str(row$long), "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- lapply(asplit(cases_by_region_subset, 1), 1, get_temp)
temps <- lapply(asplit(cases_by_region_subset, 1), get_temp)
row
row$State
temps <- lapply(asplit(cases_by_region_subset, 1), get_temp)
i
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- lapply(asplit(cases_by_region_subset, 1), get_temp)
row.day
row[1]
row[1].state
class(row)
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(as.data.frame(row))
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- lapply(asplit(cases_by_region_subset, 1), get_temp)
library(readr)
library("tidyverse")
library(httr)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
#write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- do.call(rbind, lapply(asplit(cases_by_region_subset, 1), get_temp))
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
#write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- do.call(rbind, lapply(asplit(cases_by_region, 1), get_temp))
write.csv(temps, "temp_and_cases.csv", row.names = FALSE)
temp_data <- read_csv("temperatures.csv")
temp_data$'Date time' <- as.Date(df$'Date time' , format = "%Y-%m-%d")
temps <- do.call(rbind, lapply(asplit(cases_by_region, 1), get_temp))
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 5){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
}
if (!is.null(response)){
cat(sprintf("response class : %s \n", class(response))) #response is dataframe
cat(sprintf("row class : %s \n", typeof(row)))
merged <- merge(response, row, by=0)
#write.table(merged, file = "temp_and_cases.csv", append = TRUE, sep = ",")
} else {
cat(print(row))
stop("CANT GET RESPONSE FOR PRECEDING ROW")
}
}
#cases_by_region_subset <- cases_by_region[c(:nrow(cases_by_region)),]
cases_by_region_subset <- cases_by_region[c(0:1),]
temps <- do.call(rbind, lapply(split(cases_by_region_subset, 1), get_temp))
te,
temps
write.csv(temps, "tem_and_cases_r.csv", row.names = FALSE)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
cat(sprintf("row : %s \n", row))
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 10){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
if (!is.null(response)){
merged <- merge(response, row, by=0)
} else {
Sys.sleep(5)
}
}
}
cases_by_region_subset <- cases_by_region[c(0:3),]
temps <- do.call(rbind, lapply(split(cases_by_region_subset, 1), get_temp))
temps
library(readr)
library("tidyverse")
library(httr)
cases_by_region <- read_csv("cases_by_region.csv")
cases_by_region_colnames <- colnames(cases_by_region)
build_uri <- function(row){
base <- "https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/weatherdata/history?"
api_key <- "2YXV4EUUFVIXJ5Z8976N180CP"
params <- paste("&aggregateHours=24&startDateTime=", row$day, "T00:00:00&endDateTime=", row$day, "T23:59:00&unitGroup=metric&contentType=csv&location=", row$lat,",", row$long, "&key=", api_key, sep="")
url <- paste(base, params, sep="")
url
}
get_temp <- function(row) {
uri <- build_uri(row)
cat(sprintf("URL : %s \n", uri))
response <- NULL
attempt <- 1
while(is.null(response) && attempt <= 10){
attempt <- attempt + 1
try(
response <- read_csv(uri)
)
if (!is.null(response)){
merged <- merge(response, row, by=0)
return(merged)
} else {
Sys.sleep(5)
}
}
}
cases_by_region_subset <- cases_by_region[c(0:3),]
temps <- do.call(rbind, lapply(split(cases_by_region_subset, 1), get_temp))
temps
write.csv(temps, "tem_and_cases_r.csv", row.names = FALSE)
cases_by_region <- read_csv("cases_by_region.csv")
View(cases_by_region)
cases{}
cases_by_region['State']
cases_by_region['State'].uniq
unique.data.frame(cases_by_region['State'])
unique.data.frame(cases_by_region['State'])[0..438]
unique.data.frame(cases_by_region['State'])[0..48]
unique.data.frame(cases_by_region['State'])
